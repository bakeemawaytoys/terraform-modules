variable "chart_version" {
  description = "The version of the Karpenter Helm chart to deploy.  Only `v0.28.1`, `v0.29.2`, `v0.31.1`, and `v0.31.3` are supported."
  nullable    = false
  type        = string
  validation {
    condition     = contains(["v0.28.1", "v0.29.2", "v0.31.1", "v0.31.3"], var.chart_version)
    error_message = "The chart version must be one of `v0.28.1`, `v0.29.2`, `v0.31.1`, or `v0.31.3`."
  }
}

variable "cloudwatch_alarms" {
  default     = {}
  description = <<-EOF
  Configures the CloudWatch alarms managed by the module.
  The 'actions' attribute is an optional list of ARNs for all alarm actions.
  The 'queue_depth_alarm' configures the alarm that triggers if Karpenter isn't consuming messages from its instance notification queue.
  EOF
  nullable    = false
  type = object(
    {
      actions = optional(list(string), [])
      queue_depth_alarm = optional(object({
        actions_enabled    = optional(bool, true)
        evaluation_periods = optional(number, 2)
        period             = optional(number, 60)
        threshold          = optional(number, 1)
      }), {})
    }
  )

  validation {
    condition     = 1 <= var.cloudwatch_alarms.queue_depth_alarm.evaluation_periods
    error_message = "The queue depth alarm's 'evaluation_periods' attribute must be greater than or equal to one."
  }

  validation {
    condition     = 0 < var.cloudwatch_alarms.queue_depth_alarm.period && ((var.cloudwatch_alarms.queue_depth_alarm.period % 60) == 0 || contains([10, 30], var.cloudwatch_alarms.queue_depth_alarm.period))
    error_message = "The queue depth alarm's period must be 10, 30, and any multiple of 60."
  }

  validation {
    condition     = 1 <= var.cloudwatch_alarms.queue_depth_alarm.threshold
    error_message = "The queue depth alarm's threshold must be greater than or equal to one."
  }
}

variable "container_registry_mirrors" {
  default     = []
  description = <<-EOF
  A list of objects for configuring containerd registry mirrors.

  The 'registry' attribute is the hostname of the upstream registry.
  The 'endpoint' attrbute is the URL of the mirror.

  https://github.com/bottlerocket-os/bottlerocket#container-image-registry-settings
  https://github.com/containerd/containerd/blob/main/docs/hosts.md#setup-a-local-mirror-for-docker
  EOF
  nullable    = false
  type = list(object(
    {
      endpoint = string
      registry = string
    }
  ))

  validation {
    condition     = alltrue([for mirror in var.container_registry_mirrors : can(regex("^([a-z0-9\\-]+\\.)*[a-z0-9\\-]+$", mirror.registry))])
    error_message = "The registry values must be syntactically valid hostnames."
  }

  validation {
    condition     = alltrue([for mirror in var.container_registry_mirrors : can(regex("^https://([a-z0-9\\-]+\\.)*[a-z0-9\\-]+$", mirror.endpoint))])
    error_message = "The endpoint values must be syntactically valid HTTPS URLs without any path components."
  }
}

variable "service_monitor" {
  default     = {}
  description = "Controls deployment and configuration of a ServiceMonitor custom resource to enable Prometheus metrics scraping.  The kube-prometheus-stack CRDs must be available in the k8s cluster if  `enabled` is set to `true`."
  nullable    = false
  type = object({
    enabled         = optional(bool, true)
    scrape_interval = optional(string, "30s")
  })

  validation {
    condition     = can(regex("^[1-9][0-9]*[hms]$", var.service_monitor.scrape_interval))
    error_message = "The service monitor scrape interval must be a non-zero duration string whose unit is h, m, or s.  https://prometheus-operator.dev/docs/operator/api/#monitoring.coreos.com/v1.Duration"
  }
}

variable "eks_cluster" {
  description = <<-EOF
  Attributes of the EKS cluster on which Karpenter is deployed.  The names of the attributes match the names of outputs in the eks-cluster module to allow using the module as the argument to this variable.

  The `cluster_name` attribute the the name of the EKS cluster.  It is required.
  The `cluster_security_group_id` is the ID of the security group generated by EKS when the cluster was created.  It is required.
  The 'service_account_oidc_provider_arn' attribute is the ARN of the cluster's IAM OIDC identity provider.  It is required.
  EOF
  nullable    = false
  type = object({
    cluster_name                      = string
    cluster_security_group_id         = string
    service_account_oidc_provider_arn = string
  })

  validation {
    # The naming constraints are defined at https://docs.aws.amazon.com/eks/latest/APIReference/API_CreateCluster.html#API_CreateCluster_RequestBody
    condition     = can(regex("^[0-9A-Za-z][A-Za-z0-9\\-_]{0,99}$", var.eks_cluster.cluster_name))
    error_message = "The cluster name must adhere to the EKS cluster name restrictions."
  }

  validation {
    condition     = can(regex("^sg-[a-f0-9]+$", var.eks_cluster.cluster_security_group_id))
    error_message = "The cluster_security_group_id attribute is not a syntactically valid security group ID."
  }

  validation {
    condition     = var.eks_cluster.service_account_oidc_provider_arn != null
    error_message = "The service_account_oidc_provider_arn attribute cannot be null."
  }
}

variable "enable_goldilocks" {
  default     = true
  description = <<-EOF
  Determines if Goldilocks monitors the namespace to give recommendations on tuning pod resource requests and limits.
  https://goldilocks.docs.fairwinds.com/installation/#enable-namespace
  EOF
  nullable    = false
  type        = bool
}


variable "fargate_pod_execution_role_name" {
  description = "The name of the IAM role the to assign to the Fargate profile."
  nullable    = false
  type        = string
  validation {
    condition     = length(trimspace(var.fargate_pod_execution_role_name)) > 0
    error_message = "The 'fargate_pod_execution_role_name' variable cannot be empty."
  }
}

variable "fargate_pod_subnets" {
  description = "A list of objects containing the IDs of AWS subnets to use for the Karpenter Fargate profile."
  nullable    = false
  type = list(object({
    id = string
  }))

  validation {
    condition     = 0 < length(var.fargate_pod_subnets)
    error_message = "At least one node subnet must be supplied."
  }

  validation {
    condition     = alltrue([for subnet in var.fargate_pod_subnets : can(regex("^subnet-[a-f0-9]+$", subnet.id))])
    error_message = "One or more fargate pod subnet IDs is not a syntactically valid subnet ID."
  }
}

variable "grafana_dashboard_config" {
  default     = null
  description = <<-EOF
  Configures the optional deployment of Grafana dashboards in configmaps.  Set the value to null to disable dashboard installation.  The dashboards will be added to the "Karpenter" folder in the Grafana UI.

  The 'folder_annotation_key' attribute is the Kubernets annotation that configures the Grafana folder into which the dasboards will appear in the Grafana UI.  It cannot be null or empty.
  The 'label' attribute is a single element map containing the label the Grafana sidecar uses to discover configmaps containing dashboards.  It cannot be null or empty.
  The 'namespace' attribute is the namespace where the configmaps are deployed.  It cannot be null or empty.

  * https://github.com/grafana/helm-charts/tree/main/charts/grafana#sidecar-for-dashboards
  * https://karpenter.sh/v0.20.0/getting-started/getting-started-with-eksctl/#deploy-a-temporary-prometheus-and-grafana-stack-optional
  * https://github.com/aws/karpenter/tree/main/website/content/en/v0.20.0/getting-started/getting-started-with-eksctl
  EOF
  nullable    = true
  type = object(
    {
      folder_annotation_key = string
      label                 = map(string)
      namespace             = string
    }
  )

  validation {
    condition     = var.grafana_dashboard_config == null || can(regex("^(?i)(([a-z0-9]/)|([a-z0-9][a-z0-9\\-.]{0,251}[a-z0-9])/)?(([a-z0-9])|([a-z0-9]([a-z0-9\\-_.]){0,61}[a-z0-9]))$", var.grafana_dashboard_config.folder_annotation_key))
    error_message = "The folder annotation key is syntactically invalid or null.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for details."
  }

  validation {
    condition     = try(length(var.grafana_dashboard_config.label) == 1, var.grafana_dashboard_config == null)
    error_message = "The 'label' attribute must not be null and must contain exactly one entry."
  }

  validation {
    condition     = try(alltrue([for v in values(var.grafana_dashboard_config.label) : can(regex("^(?i)(([a-z0-9])|([a-z0-9]([a-z0-9\\-_.]){0,61}[a-z0-9]))?$", v))]), var.grafana_dashboard_config == null)
    error_message = "One or more 'label' attribute values is syntactically invalid or null.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set for details."
  }


  validation {
    condition     = try(alltrue([for k in keys(var.grafana_dashboard_config.label) : can(regex("^(?i)(([a-z0-9]/)|([a-z0-9][a-z0-9\\-.]{0,251}[a-z0-9])/)?(([a-z0-9])|([a-z0-9]([a-z0-9\\-_.]){0,61}[a-z0-9]))$", k))]), var.grafana_dashboard_config == null)
    error_message = "One or more 'label' attribute keys is syntactically invalid or null.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set for details."
  }

  validation {
    condition     = try((0 < length(var.grafana_dashboard_config.namespace) && length(var.grafana_dashboard_config.namespace) < 64), var.grafana_dashboard_config == null)
    error_message = "The 'namespace' attribute must contain at least one character and at most 63 characters."
  }

  validation {
    condition     = var.grafana_dashboard_config == null || can(regex("^[a-z0-9]([a-z0-9\\-]*[a-z0-9])*$", var.grafana_dashboard_config.namespace))
    error_message = "The 'namespace' attribute must be a syntactically valid Kubernetes namespace. https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/#namespaces-and-dns"
  }
}

variable "instance_profile_name" {
  nullable    = false
  type        = string
  description = "The name of the IAM instance profile to attach to every instance launched by Karpenter."
  validation {
    condition     = length(trimspace(var.instance_profile_name)) > 0
    error_message = "The 'instance_profile_name' variable cannot be empty."
  }
}

variable "karpenter_image_registry" {
  default     = "public.ecr.aws"
  description = <<-EOF
  The container image registry from which the Karpenter images will be pulled.  The images must be in the karpenter/controller repository.
  The value can have an optional path suffix to support the use of ECR pull-through caches.
  EOF
  nullable    = false
  type        = string
  validation {
    condition     = can(regex("^([a-z0-9\\-]+\\.)*[a-z0-9\\-]+(/[a-z0-9\\-._]+)?$", var.karpenter_image_registry))
    error_message = "The 'karpenter_image_registry' variable is not a syntactically valid container registry name."
  }
}

variable "node_security_group_ids" {
  default     = []
  description = "An optional set of additional security groups to nodes provisioned with the default node templates managed by the module."
  type        = set(string)
  nullable    = false

  validation {
    condition     = alltrue([for id in var.node_security_group_ids : can(regex("^sg-[a-f0-9]+$", id))])
    error_message = "One or more node security group IDs is not a syntactically valid security group ID."
  }
}

variable "node_subnets" {
  description = "A list of objects containing the IDs and ARNs of the AWS subnets in which the EKS cluster's nodes are launched."
  nullable    = false
  type = list(
    object({
      id  = string
      arn = string
    })
  )

  validation {
    condition     = 0 < length(var.node_subnets)
    error_message = "At least one node subnet must be supplied."
  }

  validation {
    condition     = alltrue([for subnet in var.node_subnets : can(regex("^subnet-[a-f0-9]+$", subnet.id))])
    error_message = "One or more node subnet IDs is not a syntactically valid subnet ID."
  }

  validation {
    condition     = alltrue([for subnet in var.node_subnets : can(regex("^arn:aws:ec2:[a-z]{2}-[a-z]+-[0-9]+:[0-9]+:subnet/subnet-[a-f0-9]+$", subnet.arn))])
    error_message = "One or more node subnet ARNs is not a syntactically valid subnet ARN."
  }
}

variable "node_volume_size" {
  default     = 512
  description = "The size, in gigabytes, of the volumes attached to instances launched by Karpenter"
  type        = number
  validation {
    condition     = 64 <= var.node_volume_size && var.node_volume_size <= 1024
    error_message = "The 'node_volume_size' variable must be between 64 and 1024 inclusive."
  }
}

variable "pod_resources" {
  default     = {}
  description = "CPU and memory settings for the controller pods."
  nullable    = false
  type = object(
    {
      limits = optional(object(
        {
          cpu    = optional(string, "1000m")
          memory = optional(string, "1Gi")
        }
        ),
      {})
      requests = optional(
        object(
          {
            cpu    = optional(string, "1000m")
            memory = optional(string, "1Gi")
          }
        ),
      {})
    }
  )
}

variable "pod_security_standards" {
  default     = {}
  description = <<-EOF
  Configures the levels of the pod security admission modes on the build pod namespace

  https://kubernetes.io/docs/concepts/security/pod-security-admission/
  https://kubernetes.io/docs/tasks/configure-pod-container/enforce-standards-namespace-labels/
  https://kubernetes.io/docs/concepts/security/pod-security-standards/
  EOF
  nullable    = false
  type = object({
    audit   = optional(string, "restricted")
    enforce = optional(string, "restricted")
    warn    = optional(string, "restricted")
  })

  validation {
    condition     = alltrue([for v in values(var.pod_security_standards) : contains(["baseline", "privileged", "restricted"], v)])
    error_message = "One or more pod security standard levels are invalid.  Valid levels are baseline, privileged, or restricted."
  }
}

variable "labels" {
  default     = {}
  description = "An optional map of kubernetes labels to attach to every resource created by the module."
  nullable    = false
  type        = map(string)

  validation {
    condition     = alltrue([for v in values(var.labels) : can(regex("^(?i)(([a-z0-9])|([a-z0-9]([a-z0-9\\-_.]){0,61}[a-z0-9]))?$", v))])
    error_message = "One or more label values is syntactically invalid or null.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set for details."
  }

  validation {
    condition     = alltrue([for k in keys(var.labels) : can(regex("^(?i)(([a-z0-9]/)|([a-z0-9][a-z0-9\\-.]{0,251}[a-z0-9])/)?(([a-z0-9])|([a-z0-9]([a-z0-9\\-_.]){0,61}[a-z0-9]))$", k))])
    error_message = "One or more label keys is syntactically invalid or null.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set for details."
  }
}

variable "provisioners" {
  default     = {}
  description = <<-EOF
  An optional map containing objects that define Karpenter Provisioner resources the module will manage.  The keys in
  the map are used as the name of the provisioner.  The attributes of the objects correspond to a subset of the attributes
  of the Provisioner resource's spec attribute.

  All provisioners specified in the argument are configured with to use the Bottlerocket node template managed by this
  module.  Provisioner resources can be created outside of this module but managing them with the module requires less
  boilerplate code.  It also ensures the resources are updated to reflect any changes to the CRDs when Karpenter is upgraded.

  For details on the provisioner attributes, see https://karpenter.sh/v0.24.0/concepts/provisioners/.
  EOF
  nullable    = false
  type = map(object({
    annotations = optional(map(string), {})
    consolidation = optional(object({
      enabled = optional(bool, true)
      }),
    {})
    labels = optional(map(string), {})
    limits = optional(object({
      resources = optional(object({
        cpu    = optional(string, "1k")
        memory = optional(string, "1000Gi")
        }),
      {})
      }),
    {})
    requirements = optional(list(
      object({
        key      = string
        operator = optional(string, "In")
        values   = optional(set(string), [])
      })),
    [])
    startupTaints = optional(list(
      object(
        {
          key    = string
          value  = optional(string)
          effect = string
        }
      )),
    [])
    taints = optional(list(
      object(
        {
          key    = string
          value  = optional(string)
          effect = string
        }
      )),
    [])
    ttlSecondsAfterEmpty   = optional(number)
    ttlSecondsUntilExpired = optional(number)
    weight                 = optional(number)
  }))

  validation {
    condition     = alltrue([for i in values(var.provisioners) : 0 <= i.weight if i.weight != null])
    error_message = "Provisioner weights must be greater than or equal to zero if specified."
  }

  validation {
    condition     = alltrue([for i in values(var.provisioners) : 0 < i.ttlSecondsAfterEmpty if i.ttlSecondsAfterEmpty != null])
    error_message = "Provisioner ttlSecondsAfterEmpty values must be greater than zero if specified."
  }

  validation {
    condition     = alltrue([for i in values(var.provisioners) : 0 < i.ttlSecondsUntilExpired if i.ttlSecondsUntilExpired != null])
    error_message = "Provisioner ttlSecondsUntilExpired values must be greater than zero if specified."
  }

  validation {
    condition = alltrue(
      flatten([for i in values(var.provisioners) :
        [for req in i.requirements : 0 < length(req.values)]
      ])
    )
    error_message = "All Provisioner requirements must specify at least one value."
  }

  validation {
    condition = alltrue(
      flatten([for i in values(var.provisioners) :
        [for req in i.requirements : contains(["DoesNotExist", "Exists", "Gt", "In", "Lt", "NotIn"], req.operator)]
      ])
    )
    error_message = "One or more Provisioner requirements operators is invalid.  Operators must be one of In, NotIn, Exists, DoesNotExist, Gt, or Lt (case-sensitive)."
  }

  validation {
    condition = alltrue(
      flatten([for i in values(var.provisioners) :
        [for req in i.requirements : length(req.values) == 0 if contains(["DoesNotExist", "Exists", ], req.operator)]
      ])
    )
    error_message = "One or more Provisioner requirements is invalid.  No values can be specified if the operator is DoesNotExist or Exists"
  }

  validation {
    condition = alltrue(
      flatten([for i in values(var.provisioners) :
        [for req in i.requirements : 0 < length(req.values) if contains(["In", "NotIn"], req.operator)]
      ])
    )
    error_message = "One or more Provisioner requirements is invalid.  At least one value must be specified if the operator is In or NotIn."
  }

  validation {
    condition = alltrue(
      flatten([for i in values(var.provisioners) :
        [for req in i.requirements : length(req.values) == 1 && can(parseint(req.values[0])) if contains(["Gt", "Lt"], req.operator)]
      ])
    )
    error_message = "One or more Provisioner requirements is invalid.  Exactly one numeric value must be specified if the operator is Gt, or Lt."
  }

  validation {
    condition = alltrue(
      flatten([for i in values(var.provisioners) :
        [for req in i.requirements : length(setsubtract(req.values, ["arm64", "amd64"])) == 0 if req.key == "kubernetes.io/arch"]
      ])
    )
    error_message = "One or more Provisioner requirements with the key 'kubernetes.io/arch' contains invalid values.  Valid values are 'arm64' and 'amd64'."
  }

  validation {
    condition = alltrue(
      flatten([for i in values(var.provisioners) :
        [for req in i.requirements : length(setsubtract(req.values, ["spot", "on-demand"])) == 0 if req.key == "karpenter.sh/capacity-type"]
      ])
    )
    error_message = "One or more Provisioner requirements with the key 'karpenter.sh/capacity-type' contains invalid values.  Valid values are 'spot' and 'on-demand'."
  }

  validation {
    condition = alltrue(
      flatten([for i in values(var.provisioners) :
        [for req in i.requirements : 0 < length(req.key)]
      ])
    )
    error_message = "One or more Provisioner requirements keys is null or empty."
  }

  validation {
    condition = alltrue(flatten([for i in values(var.provisioners) :
      [for t in i.taints : contains(["NoExecute", "NoSchedule", "PreferNoSchedule"], t.effect)]
    ]))
    error_message = "The taint effects must be one of NoExecute, NoSchedule, or PreferNoSchedule."
  }

  validation {
    condition = alltrue(flatten([for i in values(var.provisioners) :
      [for t in i.startupTaints : contains(["NoExecute", "NoSchedule", "PreferNoSchedule"], t.effect)]
    ]))
    error_message = "The startup taint effects must be one of NoExecute, NoSchedule, or PreferNoSchedule."
  }

  validation {
    condition = alltrue(flatten([for i in values(var.provisioners) :
      [for t in i.taints : can(regex("^(?i)(([a-z0-9]/)|([a-z0-9][a-z0-9\\-.]{0,251}[a-z0-9])/)?(([a-z0-9])|([a-z0-9]([a-z0-9\\-_.]){0,61}[a-z0-9]))$", t.key))]
    ]))
    error_message = "Taint keys cannot be null and must be syntactically valid Kubernetes label keys.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set for details."
  }

  validation {
    condition = alltrue(flatten([for i in values(var.provisioners) :
      [for t in i.startupTaints : can(regex("^(?i)(([a-z0-9]/)|([a-z0-9][a-z0-9\\-.]{0,251}[a-z0-9])/)?(([a-z0-9])|([a-z0-9]([a-z0-9\\-_.]){0,61}[a-z0-9]))$", t.key))]
    ]))
    error_message = "Startup taint keys cannot be null and must be syntactically valid Kubernetes label keys.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set for details."
  }
}

variable "replicas" {
  default     = 2
  type        = number
  description = "The number of Karpenter pods to run.  Must be greater than or equal to one."
  nullable    = false
  validation {
    condition     = 1 < var.replicas
    error_message = "The value of the 'replicas' variable must be an integer greater than one."
  }
}

variable "tags" {
  default     = {}
  description = "An optional map of AWS tags to attach to every resource created by the module."
  nullable    = false
  type        = map(string)
}
